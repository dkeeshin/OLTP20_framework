// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oltp20

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OLTP20ServiceClient is the client API for OLTP20Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OLTP20ServiceClient interface {
	LocationNotification(ctx context.Context, in *StageLocation, opts ...grpc.CallOption) (*LocationStatus, error)
}

type oLTP20ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOLTP20ServiceClient(cc grpc.ClientConnInterface) OLTP20ServiceClient {
	return &oLTP20ServiceClient{cc}
}

func (c *oLTP20ServiceClient) LocationNotification(ctx context.Context, in *StageLocation, opts ...grpc.CallOption) (*LocationStatus, error) {
	out := new(LocationStatus)
	err := c.cc.Invoke(ctx, "/oltp20.OLTP20Service/LocationNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OLTP20ServiceServer is the server API for OLTP20Service service.
// All implementations must embed UnimplementedOLTP20ServiceServer
// for forward compatibility
type OLTP20ServiceServer interface {
	LocationNotification(context.Context, *StageLocation) (*LocationStatus, error)
	mustEmbedUnimplementedOLTP20ServiceServer()
}

// UnimplementedOLTP20ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOLTP20ServiceServer struct {
}

func (UnimplementedOLTP20ServiceServer) LocationNotification(context.Context, *StageLocation) (*LocationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationNotification not implemented")
}
func (UnimplementedOLTP20ServiceServer) mustEmbedUnimplementedOLTP20ServiceServer() {}

// UnsafeOLTP20ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OLTP20ServiceServer will
// result in compilation errors.
type UnsafeOLTP20ServiceServer interface {
	mustEmbedUnimplementedOLTP20ServiceServer()
}

func RegisterOLTP20ServiceServer(s grpc.ServiceRegistrar, srv OLTP20ServiceServer) {
	s.RegisterService(&OLTP20Service_ServiceDesc, srv)
}

func _OLTP20Service_LocationNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StageLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OLTP20ServiceServer).LocationNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oltp20.OLTP20Service/LocationNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OLTP20ServiceServer).LocationNotification(ctx, req.(*StageLocation))
	}
	return interceptor(ctx, in, info, handler)
}

// OLTP20Service_ServiceDesc is the grpc.ServiceDesc for OLTP20Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OLTP20Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oltp20.OLTP20Service",
	HandlerType: (*OLTP20ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocationNotification",
			Handler:    _OLTP20Service_LocationNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/oltp20.proto",
}
